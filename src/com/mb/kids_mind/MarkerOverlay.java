package com.mb.kids_mind;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.PointF;import android.graphics.Rect;import android.os.Handler;import android.util.DisplayMetrics;import android.view.View;import android.view.View.MeasureSpec;import android.view.WindowManager;import android.widget.ImageView;import com.mb.kids_mind.Dialog.MyDialogColor;import com.mb.kids_mind.listener.OnColorSelectedListener;import com.mb.kids_mind.listener.mapListener;import com.skp.Tmap.TMapMarkerItem2;import com.skp.Tmap.TMapPoint;import com.skp.Tmap.TMapView;public class MarkerOverlay extends TMapMarkerItem2 {		private DisplayMetrics dm = null;		private boolean 	isClick = false;				private Context 	mContext = null;			private TMapView 	mMapView = null;	public BalloonOverlayView balloonView = null;				private int xPoint1 = 0;	private int yPoint1 = 0;		private int xPoint2 = 0;	private int yPoint2 = 0;		private int xCallout1 = 0;	private int yCallout1 = 0;		private int xCallout2 = 0;	private int yCallout2 = 0;			private int mAnimationCount = 0;	private Rect rect = null;			@Override	public Bitmap getIcon() {		return super.getIcon();	}	@Override	public void setIcon(Bitmap bitmap) {		super.setIcon(bitmap);	}			@Override	public void setTMapPoint(TMapPoint point) {		super.setTMapPoint(point);	}	@Override	public TMapPoint getTMapPoint() {		return super.getTMapPoint();	}	@Override	public void setPosition(float dx, float dy) {		super.setPosition(dx, dy);	}		/**	 * ��Ŀ�� ���� ���� 	 * @param rect : rect	 */	public void setRect(Rect rect)	{		this.rect = rect;	}		/**	 * ��Ŀ�� ������ �����Ѵ�. 	 * @return	 */	public Rect getRect()	{		return rect;	}		public MarkerOverlay(Context context, TMapView view) 	{		this.mContext = context;		this.mMapView = view;				dm = new DisplayMetrics();		WindowManager wmgr = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);		wmgr.getDefaultDisplay().getMetrics(dm);				balloonView = new BalloonOverlayView(mContext, 0);								balloonView.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), 							MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));				balloonView.layout(0, 0, balloonView.getMeasuredWidth(), balloonView.getMeasuredHeight());					}				public static mapListener listener;	@Override	public void draw(Canvas canvas, TMapView mapView, boolean showCallout) {		int x = mapView.getRotatedMapXForPoint(getTMapPoint().getLatitude(), getTMapPoint().getLongitude());		int y = mapView.getRotatedMapYForPoint(getTMapPoint().getLatitude(), getTMapPoint().getLongitude());					canvas.save();															canvas.rotate(-mapView.getRotate(), mapView.getCenterPointX(), mapView.getCenterPointY());													float xPos = getPositionX();		float yPos = getPositionY();				int nPos_x, nPos_y;					int nMarkerIconWidth = 0;		int nMarkerIconHeight = 0;		int marginX = 0;		int marginY = 0;				nMarkerIconWidth = getIcon().getWidth();		nMarkerIconHeight = getIcon().getHeight();		nPos_x = (int) (xPos * nMarkerIconWidth);		nPos_y = (int) (yPos * nMarkerIconHeight);				if(nPos_x == 0) {			marginX = nMarkerIconWidth / 2;		} else {			marginX = nPos_x;		}				if(nPos_y == 0) {			marginY = nMarkerIconHeight / 2;		} else {			marginY = nPos_y;		}									canvas.translate(x - marginX, y - marginY);				canvas.drawBitmap(getIcon(), 0, 0, null);					rect = new Rect();		rect.left = x - marginX;		rect.top = y - marginY;		rect.right = rect.left + nMarkerIconWidth;		rect.bottom = rect.top + nMarkerIconHeight;		setRect(rect);				canvas.restore();				if(showCallout && isClick)		{				canvas.save();						canvas.rotate(-mapView.getRotate(), mapView.getCenterPointX(), mapView.getCenterPointY());						balloonView.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), 										MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));			int nTempX =  x - balloonView.getMeasuredWidth() / 2; 			int nTempY =  y - marginY - balloonView.getMeasuredHeight();												canvas.translate(nTempX, nTempY);						balloonView.draw(canvas);						xPoint1 = nTempX + balloonView.getMeasuredWidth();			yPoint1 = nTempY + balloonView.getMeasuredHeight();						xPoint2 = nTempX + balloonView.getMeasuredWidth();			yPoint2 = nTempY + balloonView.getMeasuredHeight() ;						xCallout1 = nTempX;			yCallout1 = nTempY;						xCallout2 = nTempX + balloonView.getMeasuredWidth();			yCallout2 = nTempY + balloonView.getMeasuredHeight();						canvas.restore();					}		else {			xPoint1 = -1;			yPoint1 = -1;						xPoint2 = -1;			yPoint2 = -1;						xCallout1 = -1;			yCallout1 = -1;									xCallout2 = -1;			yCallout2 = -1;		}						}		private ImageView.OnClickListener bOnClickListener = new View.OnClickListener() {			public void onClick(View v) {			LogManager.printLog("onBubbleClick");		}	};	public boolean onSingleTapUp(PointF point, TMapView mapView){		 		LogManager.printLog("onSingleTapUp");				int ex = (int) point.x;		int ey = (int) point.y;				if (getRect().contains(ex, ey)) {							LogManager.printLog("onSingleTapUp - 1");						isClick = true;		//mapView.showCallOutViewWithMarkerItemID(getID());			MarkerOverlay.listener.onMarkerPressed(getID());		}else  if(((xPoint1 <= ex) && (yPoint1 <= ey)) && ((ex <= xPoint2) && (ey <= yPoint2) ))  {						isClick = true;					//mapView.markerOnClick(getID());												}else if(((xCallout1 <= ex) && (yCallout1 <= ey)) && ((ex <= xCallout2) && (ey <= yCallout2) )){												isClick = true;																//mapView.markerOnClick(getID());					}else {						isClick = false;										}								return false;	}			Handler mHandler = null; 		@Override	public void startAnimation() {		super.startAnimation();				Runnable mRunnable = new Runnable() {	        @Override	        public void run() {	        		        	if(getAnimationIcons().size() > 0)	        	{	        		if(mAnimationCount >= getAnimationIcons().size())	        			mAnimationCount = 0;	        			        		setIcon(getAnimationIcons().get(mAnimationCount));	        			        		mMapView.refreshMap();	        			        		mAnimationCount++;	        			        		mHandler.postDelayed(this, getAniDuration());	        	}	        }	    };	     	    mHandler = new Handler();	 	    mHandler.post(mRunnable);	    	}		      		 }